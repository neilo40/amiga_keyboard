; Amiga 2000 keyboard interface - KDAT machine
; This only does the init sequence for now
; OSR is set at startup to timeout counter (500ms = 200k cycles = 100k loops of 2 instructions)
; program does a one-time store of this timeout from OSR to Y
; X is counted down to 0 and refreshed by Y if needed

.program kdat

    pull                ; pull the preloaded timeout from FIFO to OSR
    mov Y OSR           ; store it in Y
init:
    mov X Y             ; copy timeout value from Y to X
    irq wait 4          ; set IRQ 4 and wait for the KCLK SM to clear it
    set pindirs 1       ; make KDAT an output
    set pins 0 [15]     ; force KDAT low for 40us
    set pindirs 0       ; make KDAT an input to wait for ack
ack_loop:
    jmp pin continue    ; if no ack yet (low), jump over the jump to done (jmp pins happens when pin high)
    jmp done            ; received ack, skip to done
continue:
    jmp X-- ack_loop    ; if timeout not exceeded, check pin again for ack
    jmp init            ; if we got here, timeout was exceeded with no ack, start init again
done:
    jmp done            ; infinite loop for now.  TODO: regular data shifting

% c-sdk {
#include "hardware/clocks.h"

static inline void kdat_program_init(PIO pio, uint sm, uint offset, uint pin){
    pio_sm_config c = kdat_program_get_default_config(offset);

    // set the out pins group to just one pin as provided
    sm_config_set_set_pins(&c, pin, 1); 

    // connect pin to selected PIO
    pio_gpio_init(pio, pin);

    // pin is KDAT which begins as output
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);

    // enable pullup for when KDAT is made an input
    gpio_pull_up(pin);

    // set pin high to begin with
    pio_sm_set_pins(pio, pin, 1);
    
    // set clkdiv for approx 400kHz
    float div = clock_get_hz(clk_sys) / 400000;
    sm_config_set_clkdiv(&c, div);
    
    // load our config into the selected state machine
    pio_sm_init(pio, sm, offset, &c);

    // start the state machine
    pio_sm_set_enabled(pio, sm, true);    

    // load Tx FIFO with 100000 (timeout value for 500ms at 400kHz clk with 2 instructions per loop)
    pio_sm_put(pio, sm, 100000);
}
%}